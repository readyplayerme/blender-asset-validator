[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "readyplayerme.asset_validator"
dynamic = ["version"]
description = "Ready Player Me asset validation for Blender."
readme = "README.md"
requires-python = "~=3.10.0"
license = "MIT"
keywords = ["ready player me", "3D", "validation", "pyblish", "blender"]
authors = [
  { name = "Ready Player Me", email = "info@readyplayer.me" },
]
maintainers = [
  { name = "Olaf Haag", email = "olaf@readyplayer.me" },
  { name = "Daniel-Ionut Rancea", email = "daniel-ionut.rancea@readyplayer.me" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
# We need to also maintain the dependencies in the addon's requirements.txt file, since installing only dependencies from pyproject.toml is not supported by pip.
# We don't want to install our addon itself as a python module, because it's already being loaded by Blender when installed as an addon.
# https://github.com/pypa/pip/issues/11440
dependencies = [
  "pyblish-base>=1.8.11",
  "readyplayerme.pyblish_plugins @ https://github.com/readyplayerme/pyblish-plugins/archive/v0.0.2.zip",
  "pyblish-config @ https://github.com/hannesdelbeke/pyblish-plugin-manager/archive/0.0.1.zip",
]

[project.optional-dependencies]
tests = [
  "pytest",
]
dev = [
  "readyplayerme.asset_validator[tests]",
  "pre-commit",
]
devblend = [
  "readyplayerme.asset_validator[dev]",
  "bpy~=3.6.0"
]

[project.urls]
Documentation = "https://github.com/readyplayerme/blender-asset-validator#readme"
Issues = "https://github.com/readyplayerme/blender-asset-validator/issues"
Source = "https://github.com/readyplayerme/blender-asset-validator"

[tool.hatch.version]
path = "src/readyplayerme.asset_validator/__init__.py"
pattern = ".*# __version__ = '(?P<version>[^']+)'.*"

[tool.hatch.build]
include = [
  "src/readyplayerme/**/*.json",
]

[tool.hatch.build.targets.wheel]
packages = ["src/readyplayerme"]

[tool.hatch.envs.default]
python = "3.10"
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
features = [
  "devblend",
]
post-install-commands = [
  "install-precommit",
]

[tool.hatch.envs.default.scripts]
install-precommit = "pre-commit install"
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.7.0",
  "mypy>=1.4.1",
  "ruff>=0.0.280",
  "docstr-coverage>=2.3.0",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/readyplayerme.asset-validator tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
  "docstr-coverage {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-versions = ["py310"]
line-length = 120
skip-string-normalization = false

[tool.ruff]
target-version = "py310"
line-length = 120
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "C",
  "D",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "T20",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Allow try-except-pass & try-except-continue
  "S110", "S112",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # Exclude self, cls, args, kwargs from annotation, allow dynamically typed expressions (typing.Any) in type annotations
  "ANN101", "ANN102", "ANN002", "ANN003", "ANN401",
  # Don't require documentation for every function parameter.
  "D417",
]
builtins = ["_"]
unfixable = [
  # Don't touch unused imports
  "F401",
]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.isort]
known-first-party = ["readyplayerme"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = true
ignore-fully-untyped = true
suppress-none-returning = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.pydocstyle]
convention = "pep257"
ignore-decorators = ["typing.overload"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


[tool.mypy]
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true

# for strict mypy set to true:
disallow_untyped_defs = false

[tool.coverage.run]
source_pkgs = ["readyplayerme.asset-validator", "tests"]
branch = true
parallel = true
omit = [
  "src/readyplayerme.asset-validator/__init__.py",
]

[tool.coverage.paths]
readyplayerme_asset_validator = ["src/readyplayerme.asset-validator", "*/blender-asset-validator/src/readyplayerme.asset-validator"]
tests = ["tests", "*/readyplayerme.asset-validator/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
